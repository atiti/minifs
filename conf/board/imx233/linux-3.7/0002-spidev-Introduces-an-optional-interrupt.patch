From 0a05d82f7b93e03ed679a47aeb265ac0bdccd8cc Mon Sep 17 00:00:00 2001
From: Michel Pollet <buserror@gmail.com>
Date: Wed, 28 Nov 2012 16:00:08 +0000
Subject: [PATCH 02/11] spidev: Introduces an optional interrupt

this patchs allows the spidev driver to use an
optional interrupt to trigger a pool() or select()
event.

This allows spidev to be used to talk to spi devices
that have interrupt pins, like radio transceivers
and various other devices.

Signed-off-by: Michel Pollet <buserror@gmail.com>
---
 drivers/spi/spidev.c |   39 +++++++++++++++++++++++++++++++++++++++
 1 file changed, 39 insertions(+)

diff --git a/drivers/spi/spidev.c b/drivers/spi/spidev.c
index 830adbe..d5f8116 100644
--- a/drivers/spi/spidev.c
+++ b/drivers/spi/spidev.c
@@ -31,6 +31,8 @@
 #include <linux/mutex.h>
 #include <linux/slab.h>
 #include <linux/compat.h>
+#include <linux/interrupt.h>
+#include <linux/poll.h>
 
 #include <linux/spi/spi.h>
 #include <linux/spi/spidev.h>
@@ -78,6 +80,7 @@ struct spidev_data {
 	spinlock_t		spi_lock;
 	struct spi_device	*spi;
 	struct list_head	device_entry;
+	wait_queue_head_t irq_queue;
 
 	/* buffer is NULL unless this device is open (users > 0) */
 	struct mutex		buf_lock;
@@ -482,6 +485,22 @@ spidev_compat_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
 #define spidev_compat_ioctl NULL
 #endif /* CONFIG_COMPAT */
 
+/*
+ * Using poll on the spidev device will return a read even when an
+ * (optional) interrupt is triggered. This allows interfacing with
+ * SPi packet radios and other devices that have a parallel way
+ * of signaling the CPU for events
+ */
+static unsigned int spidev_poll(struct file * filp, poll_table *wait)
+{
+	struct spidev_data	*spidev = filp->private_data;
+
+	poll_wait(filp, &spidev->irq_queue, wait);
+
+	return POLLIN | POLLRDNORM;
+}
+
+
 static int spidev_open(struct inode *inode, struct file *filp)
 {
 	struct spidev_data	*spidev;
@@ -558,8 +577,22 @@ static const struct file_operations spidev_fops = {
 	.open =		spidev_open,
 	.release =	spidev_release,
 	.llseek =	no_llseek,
+	.poll = spidev_poll,
 };
 
+/*
+ * trigger for an (optional) IRQ that will wake up
+ * userland process that waits on poll() or select()
+ */
+static irqreturn_t spidev_notify_irq(int irq, void *dev)
+{
+	struct spidev_data	*spidev;
+
+	wake_up_interruptible(&spidev->irq_queue);
+
+	return IRQ_HANDLED;
+}
+
 /*-------------------------------------------------------------------------*/
 
 /* The main reason to have this class is to make mdev/udev create the
@@ -610,6 +643,12 @@ static int __devinit spidev_probe(struct spi_device *spi)
 		set_bit(minor, minors);
 		list_add(&spidev->device_entry, &device_list);
 	}
+	if (spi->irq) {
+		status = request_threaded_irq(spi->irq, spidev_notify_irq, NULL, 
+					IRQF_ONESHOT, "spidev-irq", spidev);
+		if (status)
+			dev_err(&spi->dev, "warning: unable to get irq: %d\n", status);
+	}
 	mutex_unlock(&device_list_lock);
 
 	if (status == 0)
-- 
1.7.10.4

